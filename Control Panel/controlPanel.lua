---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Will.
--- DateTime: 12/17/2020 2:07 PM
---

local monitor = peripheral.wrap("top")

function main()
    local running = true
    while running do
        local sender, reactorData = getReactorData()
        if type(reactorData) == "table" then
            print("Reactor data response from controller", sender)
            print(table.unpack(reactorData))
            local term = switchToMonitor()
            updateDisplay(reactorData) -- The display is updated in a window.  This is why it is necessary to do all the term switching
            switchToTerminal(term)
        else
            print("No new data received")
        end
    end
end

function switchToMonitor()
    local terminal = term.current()
    term.redirect(monitor)

    return terminal
end

function switchToTerminal(terminal)
    term.redirect(terminal)
end

-- Must be ran in a window to prevent GUI flickering during event pulls
function updateDisplay(reactorData)
    local mon = term.current()
    local xMax, yMax = term.getSize()
    local window = window.create(mon, 1, 1, xMax, yMax, false)
    local xMin, yMin = 1,1

    term.redirect(window)
    drawUI(xMin, xMax, yMin, yMax, "DARK")

    drawStatus(xMin, yMin, reactorData[1])
    drawEnergyBar(xMin, xMax, yMax, reactorData[3])
    drawFuelStatus(xMin, xMax, yMax, reactorData[4], reactorData[5], reactorData[6])
    drawControlRodLevel(xMin, xMax, yMin, yMax, reactorData[11])



    term.redirect(mon)


    window.setVisible(true)
    window.setVisible(false)

    drawLabels(xMin, xMax, yMax, reactorData)
end

function drawUI(xMin, xMax, yMin, yMax, mode)
    local darkBack = colors.black
    local darkForeground = colors.gray

    local lightBack = colors.white
    local lightForeground = colors.lightBlue

    local background
    local foreground
    if mode == "LIGHT" then
        background = lightBack
        foreground = lightForeground
    else
        background = darkBack
        foreground = darkForeground
    end

    paintutils.drawFilledBox(xMin, yMin, xMax, yMax, background)
    paintutils.drawFilledBox(xMin+1, yMin+1, xMax-1, yMin+(yMax*0.20), foreground) -- Top Info Bar
    paintutils.drawFilledBox(xMin+1, yMin+(yMax*0.25), xMin+(xMax*0.10), yMax-1, foreground) -- Energy Bar
    paintutils.drawFilledBox(xMin+(xMax*0.14), yMin+(yMax*0.25), xMax-1, yMax-(yMax*0.20), foreground) -- Control Rod Panel
    paintutils.drawFilledBox(xMin+(xMax*0.14), yMax-(yMax*0.15), xMax-(xMax*0.25), yMax-1, foreground) -- Fuel Stats
    paintutils.drawFilledBox(xMax-(xMax*0.21), yMax-(yMax*0.15), xMax-1, yMax-1, foreground) -- Controller On/Off
end

function drawLabels(xMin, xMax, yMax, reactorData)
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(xMax/2 - xMin*2,yMax/3)
    monitor.write("Control Rod Levels")

    term.setCursorPos(17,4)
    monitor.write("Core Temp")
    term.setCursorPos(18,5)
    monitor.write(tostring(round(reactorData[8],0)).." C")

    term.setCursorPos(28,4)
    monitor.write("Energy Output")

    term.setCursorPos(29,5)
    monitor.write(tostring(round(reactorData[10],0)).." RF")

    term.setCursorPos(43,4)
    monitor.write("Fuel Burn-Up Rate")
    term.setCursorPos(44,5)
    monitor.write(tostring(round(reactorData[9],3)).." mB/t")

    term.setCursorPos(62,4)
    monitor.write("Reactivity")
    term.setCursorPos(63,5)
    monitor.write(tostring(round(reactorData[7],0)).."%")
end
function drawStatus(xMin, yMin, isActive)
    if isActive then
        paintutils.drawFilledBox(xMin+2, yMin+2.5, xMin+7, yMin+5, colors.green)
    else
        paintutils.drawFilledBox(xMin+2, yMin+2.5, xMin+7, yMin+5, colors.red)
    end
end

function drawEnergyBar(xMin, xMax, yMax, multiplier)
    local height = yMax - 24*multiplier
    paintutils.drawFilledBox(xMin+1, height, xMin+(xMax*0.10), yMax-1, colors.yellow)
end

function drawFuelStatus(xMin, xMax, yMax, fuelLevel, wasteLevel, MAX_BUFFER)
    local minWidth = xMin+(xMax*0.14)
    local maxWidth = xMax-(xMax*0.42)

    local fuelMultiplier = fuelLevel/MAX_BUFFER
    local wasteMultiplier = wasteLevel/MAX_BUFFER

    local widthWaste = math.ceil(maxWidth*wasteMultiplier)
    local widthFuel = math.ceil(minWidth + maxWidth*fuelMultiplier)

    paintutils.drawFilledBox(xMin+(xMax*0.14), yMax-(yMax*0.15), minWidth + widthWaste, yMax-1, colors.cyan)
    paintutils.drawFilledBox(xMin+(xMax*0.14)+ widthWaste, yMax-(yMax*0.15), widthWaste + widthFuel, yMax-1, colors.lime)
end

function drawControlRodLevel(xMin, xMax, yMin, yMax, rodTable)
    local width = xMax - xMin+(xMax*0.14)- 20
    local rodData = table.unpack(rodTable)
    local rodCount = #rodData

    -- Super lazy centering of control rods.  Fix this in future version prior to release
    for i = 1, rodCount do
        if rodCount > 3 then
            paintutils.drawLine(xMin+(xMax*0.17)+(i-1)*(width/rodCount), yMin+(yMax*0.40) , xMin+(xMax*0.17)+(i-1)*(width/rodCount), yMax-(yMax*0.20)-1, colors.white)
        end
        if rodCount < 4 and rodCount > 1 then
            paintutils.drawLine(xMin+(xMax*0.25)+(i-1)*(width/rodCount), yMin+(yMax*0.40) , xMin+(xMax*0.25)+(i-1)*(width/rodCount), yMax-(yMax*0.20)-1, colors.white)
        end

        if rodCount == 1 then
            paintutils.drawLine(xMin+(xMax*0.50), yMin+(yMax*0.40), xMin+(xMax*0.50), yMax-(yMax*0.20)-1, colors.white)
        end
    end

    -- Draw knob indicating rod height in reactor
    for j = 1, rodCount do
        local multiplier = rodData[j]/100
        local height = yMin+(yMax*0.40) + 10*multiplier

        if rodCount > 3 then
            paintutils.drawFilledBox(xMin+(xMax*0.17)+(j-1)*(width/rodCount)-1, height, xMin+(xMax*0.17)+(j-1)*(width/rodCount)+1, height + 1, colors.red)
        end
        if rodCount < 4 and rodCount > 1 then
            paintutils.drawFilledBox(xMin+(xMax*0.25)+(j-1)*(width/rodCount)-1, height, xMin+(xMax*0.25)+(j-1)*(width/rodCount)+1, height + 1, colors.red)
        end

        if rodCount == 1 then
            paintutils.drawLine(xMin+(xMax*0.50), height, xMin+(xMax*0.50), height + 1, colors.white)
        end
    end
end

function getReactorData()
    rednet.open("bottom")
    local id, message = rednet.receive(2)

    return id, message
end

function round(num, places)
    local multiplier = 10^(places or 0)
    return math.floor(num * multiplier + 0.5)/multiplier
end


term.clear()
term.setCursorPos(1,1)
main()
